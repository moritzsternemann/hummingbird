// Benchmark boilerplate generated by Benchmark

import Benchmark
import Foundation
import HBPerformance

let benchmarks = {
    Benchmark("Basic Allocations", configuration: .init(metrics: [.wallClock, .mallocCountTotal, .memoryLeaked])) { benchmark in
        try runBenchmark(benchmark: benchmark, running: HBApplicationBenchmarkWrapper(BasicBenchmark()))
    }

    Benchmark("RequestInBody Allocations", configuration: .init(metrics: [.wallClock, .mallocCountTotal, .memoryLeaked])) { benchmark in
        try runBenchmark(benchmark: benchmark, running: HBApplicationBenchmarkWrapper(RequestBodyBenchmark(bufferSize: 100)))
    }

    Benchmark("LargeRequestInBody Allocations", configuration: .init(metrics: [.wallClock, .mallocCountTotal, .memoryLeaked])) { benchmark in
        try runBenchmark(benchmark: benchmark, running: HBApplicationBenchmarkWrapper(RequestBodyBenchmark(bufferSize: 250_000)))
    }

    Benchmark("ResponseInBody Allocations", configuration: .init(metrics: [.wallClock, .mallocCountTotal, .memoryLeaked])) { benchmark in
        try runBenchmark(benchmark: benchmark, running: HBApplicationBenchmarkWrapper(ResponseBodyBenchmark(bufferSize: 100)))
    }

    // Add additional benchmarks here
    Benchmark("TrieRouter", configuration: .init(metrics: [.wallClock, .mallocCountTotal])) { benchmark in
        try runBenchmark(benchmark: benchmark, running: TrieRouterBenchmark(iterations: 10000))
    }
}
